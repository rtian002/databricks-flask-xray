_NAME='dbs-rtian1'
_UUID='b0cc09a7-06f0-42fb-a161-17434162ebd9'
_WEB_DOMAIN='dbs-rtian1.126555.xyz'
_WEB_ARGO_AUTH='eyJhIjoiYWZhYmM2MWRlYTliMDU1Y2JjZjc3MThmNDA3YzRlYWMiLCJ0IjoiOGFiYzZjNmMtZWU3MC00OGJlLWJlNzQtMTk3OGFiNTc0OTM0IiwicyI6Ik9EZzBOVGRqTXpFdE16VXdPQzAwTlRBNUxUZzBOamd0TkRsaU0yRmpObVJtWVdRdyJ9'
_ARGO_DOMAIN='db1.auth.xx.kg'
_ARGO_AUTH='eyJhIjoiYWZhYmM2MWRlYTliMDU1Y2JjZjc3MThmNDA3YzRlYWMiLCJ0IjoiNzU3OTZjMGQtODkyOS00Y2IzLWI5MDItZDUyOGYyYmQzNDdmIiwicyI6Ik9ESTNNREUzWm1RdE5qSXpaQzAwT1RBMkxXRmtaV1V0WkdRMll6RTFZVEUwWmprMyJ9'
_SUB_PATH='getmysubs'

WEB_ARGO_DOMAIN=os.environ.get('WEB_DOMAIN',_WEB_DOMAIN)
WEB_ARGO_AUTH = os.environ.get('WEB_ARGO_AUTH', _WEB_ARGO_AUTH)
FILE_PATH = os.environ.get('FILE_PATH', './.cache')    
SUB_PATH = os.environ.get('SUB_PATH', _SUB_PATH)           
UUID = os.environ.get('UUID', _UUID)  
NEZHA_SERVER = os.environ.get('NEZHA_SERVER', '')      
NEZHA_PORT = os.environ.get('NEZHA_PORT', '')          
NEZHA_KEY = os.environ.get('NEZHA_KEY', '')            
ARGO_DOMAIN = os.environ.get('ARGO_DOMAIN', _ARGO_DOMAIN)        
ARGO_AUTH = os.environ.get('ARGO_AUTH', _ARGO_AUTH)            
ARGO_PORT = int(os.environ.get('ARGO_PORT', '8001'))   
CFIP = os.environ.get('CFIP', 'www.visa.com.tw')       
CFPORT = int(os.environ.get('CFPORT', '443'))          
NAME = os.environ.get('NAME', _NAME)                   
PORT = int(os.environ.get('SERVER_PORT') or os.environ.get('PORT') or 3000)